# load stuff from config
SAMPLES=config.get('metagenome_files', [])
QUERY=config.get('query_file', '')

# CTB: add bitscore threshold (currently hard coded)
BITSCORE_THRESHOLD=50

# this sets LOG_DIR, RESULTS_DIR, SAMPLE_PREP, and QUERY_PREP
include: '../common.snakefile'

###
### actual rules to run something
###

rule prepare_sample:
    output: directory(SAMPLE_PREP)
    conda: "../conf/env/blast2.yml"
    log: f"{LOG_DIR}/prepare_sample.log"
    benchmark: f"{LOG_DIR}/prepare_sample.benchmark"
    shell: """
       rm -fr {output}
       mkdir -p {output}
       # uncompress or just copy
       gunzip -c {SAMPLES} > {output}/data.fa || \
           cat {SAMPLES} > {output}/data.fa
       makeblastdb -in {output}/data.fa -out {output}/blastdb -dbtype nucl 2> {log}
    """

rule prepare_query:
    output: directory(QUERY_PREP)
    conda: "../conf/env/blast2.yml"
    params:
        name = os.path.basename(QUERY)
    log: f"{LOG_DIR}/prepare_query.log"
    benchmark: f"{LOG_DIR}/prepare_query.benchmark"
    shell: """
       rm -fr {output}
       mkdir -p {output}
       gunzip -c {QUERY} > {output}/query.fa || \
           cat {QUERY} > {output}/query.fa
    """

rule execute_query_command:
    input:
        query = f"{QUERY_PREP}/query.fa",
        db = f"{SAMPLE_PREP}/blastdb.ndb",
    output: directory(RESULTS_DIR)
    conda: "../conf/env/blast2.yml"
    log: f"{LOG_DIR}/execute_query.log"
    benchmark: f"{LOG_DIR}/execute_query.benchmark"
    shell: """
       rm -fr {output}
       mkdir -p {output}
       tblastx -db {SAMPLE_PREP}/blastdb -query {input.query} \
              -outfmt 6 -out {output}/results.tsv 2> {log}
    """

rule do_query:
    message: "Run query and evaluate if it found it, or not."
    input: dir=RESULTS_DIR
    benchmark: f"{LOG_DIR}/do_query.benchmark"
    run:
        with open(input.dir + '/results.tsv', "rt") as fp:
            lines = fp.readlines()

            # victory condition for blast2 - bitscore above ~50
            found = False

            if len(lines):
                first_line = lines[0]
                tup = first_line.split('\t')
                bitscore = tup[11]
                bitscore = float(bitscore)

                if bitscore >= BITSCORE_THRESHOLD:
                    found = True
        with open(input.dir + '/RESULT', 'wt') as fp:
            if found:
                fp.write('1\n')
            else:
                fp.write('0\n')

rule install_software:
    conda: "../conf/env/blast2.yml"
    log: f"{LOG_DIR}/install_software.log"
    benchmark: f"{LOG_DIR}/install_software.benchmark"
    shell: """
       blastn -help 2> {log}
    """
