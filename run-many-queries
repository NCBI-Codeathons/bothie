#! /usr/bin/env python3
"""
Using a bothie tool directory (e.g. ./sourmash/), run multiple queries.

* install tools
* prepare sample
* for each query, prepare and run query
"""
import sys
import os
import subprocess
import datetime
import shutil
import argparse
import yaml
import tempfile


def run_snakemake(target, output_dir, config_d, tool_dir):
    assert output_dir.startswith('/') # abs path
    config_filename = os.path.join(output_dir, 'conf.yml')
    print('writing summary config file', config_filename)

    with open(config_filename, 'wt') as fp:
        yaml.dump(config_d, fp)

    cmd = f"snakemake --use-conda -p -j 1 --configfile={config_filename} {target}"
    print('running:', (cmd,))
    subprocess.check_call(cmd, shell=True, cwd=tool_dir)


def main():
    p = argparse.ArgumentParser()
    p.add_argument('config_file', help='config file, YAML or JSON')
    p.add_argument('tool', help='tool directory, e.g. sourmash')
    p.add_argument("--queries", required=True, nargs='+',
                   help="one or more query filenames")
    p.add_argument('--output-dir', default=None)
    p.add_argument('--timelog', default=None)
    args = p.parse_args()

    queries = args.queries

    # fix paths so that they are relative to cwd
    queries = [ os.path.abspath(q) for q in queries ]

    if args.output_dir:
        output_dir = os.path.abspath(args.output_dir)
    else:
        d = tempfile.mkdtemp(prefix=f'outputs.{args.tool}.', dir='.')
        output_dir = os.path.abspath(d)

    tool_dir = args.tool
    config_file = os.path.abspath(args.config_file)

    timelog_fp = None
    if args.timelog:
        timelog_fp = open(args.timelog, 'wt')

    config_file = os.path.abspath(args.config_file)

    with open(config_file, 'rt') as fp:
        config_d = yaml.safe_load(fp)

    config_d['sample_prep_dir'] = os.path.join(output_dir, 'prep.sample')
    config_d['log_dir'] = os.path.join(output_dir, 'logs')

    print('installing software:')

    run_snakemake('install_software', output_dir, config_d, tool_dir)

    print(datetime.datetime.now(), 'START SAMPLE PREP', file=timelog_fp)
    run_snakemake('prepare_sample', output_dir, config_d, tool_dir)
    print(datetime.datetime.now(), 'END SAMPLE PREP', file=timelog_fp)

    results = []

    num = 0
    for query in queries:
        num += 1
        print('-----------------------------')
        print("query file:", query)

        query_prep_dir = os.path.join(output_dir, f'prep.query.{num}')
        results_dir = os.path.join(output_dir, f'results.{num}')

        config_d['query_file'] = query
        config_d['query_prep_dir'] = query_prep_dir
        config_d['results_dir'] = results_dir

        print(datetime.datetime.now(), 'START QUERY PREP', file=timelog_fp)
        run_snakemake('prepare_query', output_dir, config_d, tool_dir)
        print(datetime.datetime.now(), 'END QUERY PREP', file=timelog_fp)

        print(datetime.datetime.now(), 'START DO QUERY', file=timelog_fp)
        run_snakemake('do_query', output_dir, config_d, tool_dir)
        print(datetime.datetime.now(), 'END DO QUERY', file=timelog_fp)

        result_file = os.path.join(results_dir, "RESULT")
        assert os.path.exists(result_file)
        with open(result_file) as fp:
            result = fp.read()
            result = result.strip()
            result = int(result)
            result = bool(result)
            if result:
                print('SUCCESS! It was found! :)', query)
            else:
                print('FAILURE! It was not found! ;(', query)
            results.append((query, result, results_dir))

    print('SUMMARY:')
    for (query, result, dirname,) in results:
        dirname = os.path.relpath(dirname)
        print(f"{query}\t{result}\t{dirname}")

    print('')
    print(f"results under {output_dir}")

if __name__ == '__main__':
    main()
