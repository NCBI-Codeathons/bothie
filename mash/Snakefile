import sys, os

# load stuff from config file
SAMPLES=config.get('metagenome_files', [])
QUERY=config.get('query_file', '')
ksize = config.get('ksize', 'unset')

try:
    ksize = int(ksize)
except ValueError:
    print(f"Invalid ksize {repr(ksize)}", file=sys.stderr)
    raise

# this sets OUTPUT_DIR, RESULTS_DIR, SAMPLE_PREP, and QUERY_PREP
include: '../common.snakefile'


###
### actual rules to run something
###

rule prepare_sample:
    output: directory(SAMPLE_PREP)
    conda: "../conf/env/mash2.yml"
    log: f"{LOG_DIR}/prepare_sample.log"
    benchmark: f"{LOG_DIR}/prepare_sample.benchmark"
    shell: """
       rm -fr {output}
       mkdir -p {output}
       # seems like we leave the sample/target in fasta/fastq etc. format
    """

rule prepare_query:
    output: directory(QUERY_PREP)
    conda: "../conf/env/mash2.yml"
    log: f"{LOG_DIR}/prepare_query.log"
    benchmark: f"{LOG_DIR}/prepare_query.benchmark"
    shell: """
       rm -fr {output}
       mkdir -p {output}
       mash sketch -k {ksize} -s 20000 {QUERY} -o {output}/query.msh 2> {log}
    """

rule execute_query_command:
    input:
        # this is annoying: mash seems to REQUIRE that the query have a .msh extension...
        # not cool. initially I was renaming the forced query.sig.msh file to query.sig,
        # but it just doesn't seem to like it.
        query = f"{QUERY_PREP}/query.msh",
        sample = SAMPLES,
    output: directory(RESULTS_DIR)
    log: f"{LOG_DIR}/execute_query.log"
    benchmark: f"{LOG_DIR}/execute_query.benchmark"
    conda: "../conf/env/mash2.yml"
    shell: """
       rm -fr {output}
       mkdir -p {output}
       # doesn't seem like mash screen supports output direction
       mash screen {input.query} {input.sample} > {output}/results.csv 2> {log}
       # if we want to print the results still
       cat {output}/results.csv
    """

rule do_query:
    message: "Run query and evaluate if it found it, or not."
    input: dir=RESULTS_DIR
    run:
        with open(input.dir + '/results.csv', "rt") as fp:
            lines = fp.readlines()

            # victory condition for mash - one line in file :)
            found = False
            if len(lines) == 1:
                found = True
        with open(input.dir + '/RESULT', 'wt') as fp:
            if found:
                fp.write('1\n')
            else:
                fp.write('0\n')


rule install_software:
    conda: "../conf/env/mash2.yml"
    log: f"{LOG_DIR}/install_software.log"
    benchmark: f"{LOG_DIR}/install_software.benchmark"
    shell: """
       mash --version 2> {log}
    """
